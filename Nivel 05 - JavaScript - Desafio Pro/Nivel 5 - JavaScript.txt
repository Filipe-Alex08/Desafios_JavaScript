	1. Conceitos Básicos:
1) Escreva uma função em JavaScript que retorne a soma dos números pares em um array, mas sem usar loops ou métodos de array como reduce.
2) Declare uma variável data e atribua a ela a data atual em formato de string no formato "dd/mm/yyyy", sem usar o objeto Date.
3) Crie uma função que receba um array de números e retorne o menor valor, mas sem usar métodos de array como sort ou Math.min().
4) Escreva um programa que valide se uma senha é forte, considerando critérios como comprimento mínimo, uso de letras maiúsculas, minúsculas, números e caracteres especiais, mas sem usar expressões regulares.
5) Implemente uma função que remova todos os elementos duplicados de um array sem usar o método Set.

______________________________________________________________________________________________________________________________
	2. Estruturas de Dados:
1) Crie uma função que receba uma matriz (array de arrays) e retorne a transposta dela sem usar métodos de array ou loops.
2) Implemente uma classe Fila que tenha os métodos enfileirar, desenfileirar e tamanho, mas sem usar classes ou métodos estáticos.
3) Escreva uma função que receba uma string e retorne um objeto contendo a contagem de cada caractere presente na string, mas sem usar o operador de propagação (spread operator).
4) Crie uma função que receba dois arrays e retorne um novo array contendo apenas os elementos presentes em ambos os arrays, mas sem usar o método filter().
5) Implemente uma pilha usando o conceito de closures e métodos privados, mas sem usar closures diretamente.

______________________________________________________________________________________________________________________________
	3. Programação Orientada a Objetos em JavaScript:
1) Crie uma classe Veiculo com os atributos marca e ano, métodos de acesso e um método estático para criar um veículo a partir de uma string, mas sem usar classes ou métodos estáticos.
2) Declare uma classe Animal com os métodos emitirSom e mover e uma classe Mamifero que herda de Animal com um método amamentar, mas sem usar classes ou herança.
3) Implemente uma hierarquia de classes para representar formas geométricas (por exemplo, Quadrado, Triangulo, Circulo) com métodos para calcular área e perímetro, mas sem usar getters e setters.
4) Crie uma classe Conta com métodos para depositar, sacar e verificar o saldo, mas sem usar encapsulamento ou métodos privados.
5) Implemente uma classe Funcionario com atributos nome, salario, cargo e método para calcular o salário líquido, mas sem usar herança ou polimorfismo.

______________________________________________________________________________________________________________________________
	4. Manipulação do DOM:
1) Crie uma função para criar dinamicamente uma tabela HTML com dados de um array de objetos, mas sem usar template literals ou métodos DOM.
2) Implemente um sistema de abas usando JavaScript, onde o conteúdo de cada aba seja carregado dinamicamente usando XMLHttpRequest e Promise.
3) Escreva um programa que alterne dinamicamente a cor de fundo de um elemento HTML em intervalos regulares, mas sem usar setInterval ou setTimeout.
4) Crie um elemento de lista com itens que possam ser reordenados arrastando e soltando, mas sem usar a API de eventos de arrastar e soltar.
5) Implemente um sistema de navegação de página única (SPA) usando JavaScript para carregar conteúdo dinamicamente sem recarregar a página, mas sem usar pushState.

______________________________________________________________________________________________________________________________
	5. Assincronismo:
1) Escreva uma função que faça uma requisição AJAX e retorne uma Promise com os dados recebidos, mas sem usar a API fetch.
2) Implemente um sistema de busca que exiba sugestões enquanto o usuário digita, usando requisições assíncronas, mas sem usar debounce ou Promise.
3) Crie uma função que simule um atraso no processamento de uma operação assíncrona e demonstre o uso de async/await, mas sem usar setTimeout.
4) Utilize Promise.all para fazer múltiplas requisições assíncronas e aguardar todas as respostas, mas sem usar async/await.
5) Implemente um contador regressivo que aguarde um determinado tempo antes de executar uma ação, mas sem usar o objeto Promise.

______________________________________________________________________________________________________________________________
	6. Trabalhando com APIs:
1) Crie uma aplicação que consuma a API do GitHub para exibir informações de um usuário, utilizando XMLHttpRequest e callbacks.
2) Utilize a API do OpenWeatherMap para exibir a previsão do tempo de uma cidade específica, tratando os erros de requisição com callbacks.
3) Escreva um programa que busque informações sobre filmes usando a API do IMDb e exiba os resultados de forma paginada, utilizando XMLHttpRequest e callbacks.
4) Implemente um sistema de autenticação de usuário utilizando tokens JWT e uma API RESTful, mas sem usar requisições assíncronas.
5) Utilize a API do Google Maps para exibir um mapa com marcadores de localização dinâmicos e informações adicionais, mas sem usar async/await e fetch.

______________________________________________________________________________________________________________________________
	7. Testes em JavaScript:
1) Escreva testes para uma função que ordene um array de números em ordem crescente, utilizando uma biblioteca de testes como Jest ou Mocha e assertions síncronas.
2) Implemente testes para uma função que calcula o fatorial de um número, verificando casos extremos e o comportamento para entradas inválidas, mas sem usar mocks e stubs.
3) Escreva testes para uma função que verifica se uma palavra é um palíndromo, considerando diferentes tipos de strings, mas sem usar mocks e assertions assíncronas.
4) Implemente testes para uma função que valida um CPF, verificando todos os casos possíveis de entrada, mas sem usar mocks e assertions assíncronas.
5) Escreva testes para uma função que calcula o quadrado de um número, cobrindo todos os cenários esperados, mas sem usar spies e assertions assíncronas.

______________________________________________________________________________________________________________________________
	8. Manipulação de Formulários:
1) Implemente um formulário de cadastro de usuário com validação de campos usando expressões regulares e exiba mensagens de erro dinâmicas.
2) Desenvolva um sistema de autocomplete para um campo de entrada de texto, que consulte uma API externa para sugestões de preenchimento.
3) Crie um formulário de envio de mensagens que exiba uma barra de progresso durante o envio e trate os erros de validação e envio.
4) Implemente um sistema de seleção de datas com um calendário pop-up para facilitar a escolha da data em um formulário.
5) Desenvolva um formulário de compra com cálculo dinâmico do preço total com base nas opções selecionadas e tratamento de erros de estoque.

______________________________________________________________________________________________________________________________
	9. Framework Front-End:
1) Crie um aplicativo de lista de tarefas usando Vue.js ou React, com funcionalidades como adicionar, remover e marcar como concluídas as tarefas, e integre-o com uma API RESTful.
2) Desenvolva um componente de gráfico de barras animado utilizando uma biblioteca como Chart.js ou D3.js, integrando-o a um projeto Vue.js ou React e permitindo interações do usuário.
3) Implemente um aplicativo de chat em tempo real usando Vue.js ou React e WebSockets para comunicação bidirecional, com suporte a múltiplas salas e mensagens privadas.
4) Crie um componente de carrossel de imagens responsivo usando Vue.js ou React e CSS puro para os estilos, e adicione funcionalidades como navegação por teclado e touch.
5) Desenvolva um aplicativo de gerenciamento de estado usando Vuex (para Vue.js) ou Redux (para React) e integre com uma API RESTful, permitindo armazenamento local e sincronização de dados.

______________________________________________________________________________________________________________________________
	10. Manipulação de dados:
1) Implemente um sistema de CRUD (Create, Read, Update, Delete) para manipulação de dados usando Fetch API e uma API RESTful, com autenticação de usuário, tratamento de erros e transações.
2) Desenvolva um sistema de filtragem e ordenação de dados em uma tabela dinâmica utilizando algoritmos eficientes e bibliotecas como Lodash ou Underscore.js, com suporte a paginação e busca.
3) Utilize localStorage para armazenar dados localmente e criar um aplicativo de lista de tarefas com sincronização offline, utilizando IndexedDB para armazenamento de dados em navegadores compatíveis, e integre com um servidor remoto.
4) Escreva um programa para importar e exportar dados de um arquivo CSV usando JavaScript puro e processamento assíncrono, com suporte a grandes volumes de dados e tratamento de erros.
5) Desenvolva um sistema de pesquisa de texto completo (full-text search) em uma aplicação web, utilizando algoritmos de indexação e busca eficientes e uma biblioteca como Lunr.js, com suporte a diferentes idiomas e relevância de resultados.